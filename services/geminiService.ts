import { GoogleGenAI, Modality } from "@google/genai";
import type { UploadedImage } from '../types';

if (!process.env.API_KEY) {
  // This is a placeholder for environments where the key is missing.
  // In a real deployed environment, the key should always be present.
  console.warn("API_KEY environment variable not set. Using a placeholder.");
  // @ts-ignore
  process.env.API_KEY = "YOUR_API_KEY_HERE"; 
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToGenerativePart = (base64: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64,
      mimeType,
    },
  };
};

export const generatePromptFromImages = async (
  targetImage: UploadedImage,
  inputImages: UploadedImage[],
  additionalRequirements: string = ''
): Promise<string> => {
  try {
    const model = 'gemini-2.5-flash';
    const parts: any[] = [];
    let promptText = '';

    if (inputImages.length > 0) {
      promptText = `You are an expert prompt engineer for an image editing AI. Your task is to create a concise, imperative command that describes how to transform the input image(s) into the target image. The command must be safe for work and suitable for all audiences. When multiple input images are provided, they are listed first, followed by the final target image. Focus only on the changes required. For example: "combine the features of the input images", "change the background to a snowy mountain", "apply a vintage film filter". Do not describe the images themselves. Provide only the command.`;
    } else {
      promptText = `You are an expert prompt engineer for a text-to-image AI. Describe the provided image in detail to create a high-quality, descriptive prompt that could be used to generate a similar image. The prompt must be safe for work and suitable for all audiences. Focus on subject, style, composition, colors, and lighting.`;
    }

    if (additionalRequirements) {
      promptText += `\n\nPlease also incorporate the following user requirements: "${additionalRequirements}"`;
    }

    parts.push({ text: promptText });
    
    if (inputImages.length > 0) {
      inputImages.forEach(image => {
        parts.push(fileToGenerativePart(image.base64, image.mimeType));
      });
    }
    parts.push(fileToGenerativePart(targetImage.base64, targetImage.mimeType));

    const response = await ai.models.generateContent({
        model: model,
        contents: { parts: parts },
    });
    
    return response.text.trim();

  } catch (error) {
    console.error("Error generating prompt:", error);
    if (error instanceof Error) {
        throw new Error(`Error calling Gemini API: ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the prompt.");
  }
};

export const generateImageFromPrompt = async (prompt: string, inputImages: UploadedImage[] = []): Promise<string> => {
  try {
    if (inputImages.length > 0) {
      // Use image editing model with the first input image as reference
      const referenceImage = inputImages[0];
      const imagePart = fileToGenerativePart(referenceImage.base64, referenceImage.mimeType);
      const textPart = { text: prompt };

      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
          parts: [imagePart, textPart],
        },
        config: {
          responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
      });

      const imagePartResponse = response.candidates?.[0]?.content?.parts?.find(part => part.inlineData);

      if (imagePartResponse?.inlineData) {
        return imagePartResponse.inlineData.data;
      } else {
        throw new Error("No image was generated by the editing model. This can happen if the prompt is blocked by safety filters.");
      }
    } else {
      // Use text-to-image generation model
      const response = await ai.models.generateImages({
          model: 'imagen-4.0-generate-001',
          prompt: prompt,
          config: {
            numberOfImages: 1,
            outputMimeType: 'image/png',
            aspectRatio: '1:1',
          },
      });

      const imageBytes = response.generatedImages?.[0]?.image?.imageBytes;

      if (imageBytes) {
        return imageBytes;
      } else {
        throw new Error("No image was generated. This can happen if the prompt is blocked by safety filters. Please try different images or modify the prompt.");
      }
    }
  } catch (error) {
    console.error("Error generating image:", error);
    if (error instanceof Error) {
        throw error;
    }
    throw new Error("An unknown error occurred while generating the image.");
  }
};